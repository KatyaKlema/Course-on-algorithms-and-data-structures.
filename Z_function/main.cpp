#include <iostream>
#include <vector>
using namespace std;

/*
 Привидение Петя любит играть со своими кубиками. Он любит выкладывать их в ряд и разглядывать свое творение. Однако недавно друзья решили подшутить над Петей и поставили в его игровой комнате зеркало. Ведь всем известно, что привидения не отражаются в зеркале! А кубики отражаются. Теперь Петя видит перед собой N цветных кубиков, но не знает, какие из этих кубиков настоящие, а какие — всего лишь отражение в зеркале. Помогите Пете! Выясните, сколько кубиков может быть у Пети. Петя видит отражение всех кубиков в зеркале и часть кубиков, которая находится перед ним. Часть кубиков может быть позади Пети, их он не видит.
Формат входных данных
Первая строка входного файла содержит число N (1 ≤ N ≤ 100000) и количество различных цветов, в которые могут быть раскрашены кубики — M (1 ≤ M ≤ 100000). Следующая строка содержит N целых чисел от 1 до M — цвета кубиков.
Формат результата
Выведите в выходной файл все такие K в порядке возрастания, что у Пети может быть K кубиков
 Входные данные:
6 2
1 1 2 2 1 1
 Результат работы:
3 5 6
 */
set<int> Zfunc(const vector<int>& s) {
    vector<int> z(s.size(), 0);
    set<int> ans;
    z[0] = s.size();
    for (int i = 1, l = 0, r = 0; i < s.size(); ++i) {
        z[i] = max(0, min(r - i, z[i - l]));
        while (i + z[i] < s.size() && s[z[i]] == s[i + z[i]]) {
            ++z[i];
        }
        if (i + z[i] > r) {
            l = i;
            r = i + z[i];
        }
        if (z[i] == s.size() - i && z[i] % 2 == 0) {
            ans.emplace(z[i]/2);
        }
    }
    ans.emplace(0);
    return ans;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    int N, M;
    int c;
    cin >> N >> M;
    vector<int> S(N * 2 + 1, '0');
    for (int i = 0; i < N; i++) {
        cin >> c;
        S[i] = c;
        S[2 * N - i] = c;
    }
    set<int> pi = Zfunc(S);
    vector<int> p(pi.begin(), pi.end());
    sort(p.begin(), p.end(), greater<int>());
    for (int i = 0; i < p.size(); ++i) {
        cout << N - p[i] << ' ';
    }
    return 0;
}